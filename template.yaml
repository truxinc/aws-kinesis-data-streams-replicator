AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Kinesis Data Streams - Cross Region Replicator Function


Metadata:
  AWS::ServerlessRepo::Application:
    Name: Kinesis-Data-Streams-Cross-Region-Replicator
    Description: "Creates Enhanced-Fan-Out Lambda Consumer to replicate KDS data across regions"
    Labels:
      - Kinesis-Data-Streams
      - Enhanced-Fan-Out
      - Lambda
      - Serverless

Parameters:
  InputStreamName:
    Type: String
    Description: Input Kinesis Stream
  TargetStreamReplicationRegion:
    Type: String
    Description: Enter the KDS Stream Target replication region
  SNSTopic:
    Type: String
    Default: KDSTestTopic
    Description: Enter SNS Topic to send failed records notification

Globals:
  Function:
    Timeout: 20

Resources:
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
      Policies:
        - PolicyName: KDSWrites
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:PutRecord
                Resource:
                  - !Sub 'arn:aws:kinesis:*:${AWS::AccountId}:stream/${InputStreamName}'
        - PolicyName: CloudWatchMetrics
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
        - PolicyName: SNSPublishMessage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: "*"
  KinesisReplicatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${InputStreamName}-replication-lambda-function'
      CodeUri: KinesisReplicatorFunction
      Handler: consumer.Handler::handleRequest
      PackageType: Zip
      Role: !GetAtt LambdaRole.Arn
      Runtime: java11
      MemorySize: 512
      Timeout: 900
      Environment:
        Variables:
          TARGET_STREAM_REPLICATION_REGION: !Ref TargetStreamReplicationRegion
          SNS_Topic_ARN: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic}'
  KinesislambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 8000
      BisectBatchOnFunctionError: false
      Enabled: true
      EventSourceArn: !GetAtt KinesisStreamConsumer.ConsumerARN
      FunctionName: !GetAtt KinesisReplicatorFunction.Arn
      FunctionResponseTypes:
        - ReportBatchItemFailures
      StartingPosition: LATEST
  KinesisStreamConsumer:
    Type: AWS::Kinesis::StreamConsumer
    Properties:
      StreamARN: !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${InputStreamName}'
      ConsumerName: !Sub '${InputStreamName}_replicator'

Outputs:
  FunctionName:
    Description: "Function name"
    Value: !Ref KinesisReplicatorFunction
  ConsumerARN:
    Description: "Stream consumer ARN"
    Value: !GetAtt KinesisStreamConsumer.ConsumerARN